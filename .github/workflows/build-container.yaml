name: Build Image
on:
  push:
    tags:
      - '*-v*.*.*'
  pull_request:
    branches: [ main ]
  merge_group:
    branches: [ main ]
    
jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: 'read'
      id-token: 'write'
      packages: 'write'
      security-events: write
      actions: read
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Set tag output
        id: tag
        run: |
          TAG=${GITHUB_REF#refs/*/}

          APP=$(echo $TAG | cut -d'-' -f1)
          VERSION=$(echo $TAG | cut -d'-' -f2)
          APP_VERSION=$(grep -Eo "FROM[^:]+:[^[:space:]]+" ${APP}/Dockerfile | cut -d ":" -f 2-)
          APP_IMAGE=$(grep -Eo "FROM[^:]+:[^[:space:]]+" ${APP}/Dockerfile | cut -d ":" -f -1 | cut -d " " -f 2-)


          echo "app=${APP}" >> $GITHUB_OUTPUT
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "app_version=${APP_VERSION}" >> $GITHUB_OUTPUT
          echo "app_image=${APP_IMAGE}" >> $GITHUB_OUTPUT
      - name: Test
        run: |
          echo "App: ${{ steps.tag.outputs.app }}"
          echo "Version: ${{ steps.tag.outputs.version }}"
          echo "App Version: ${{ steps.tag.outputs.app_version }}"
          echo "App Image: ${{ steps.tag.outputs.app_image }}"
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v4
        with:
          flavor: |
            latest=false
          # list of Docker images to use as base name for tags
          images: |
            ghcr.io/pluralsh/containers/${{ steps.tag.outputs.app_image }}
          # generate Docker tags based on the following events/attributes
          tags: |
            type=match,prefix=${{ steps.tag.outputs.app_version }}-plural,pattern=.*-v(.*),group=1
          # type=raw,value=${{ steps.tag.outputs.app_version }}-plural-${{ steps.tag.outputs.version }}
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to GHCR
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build ${{ steps.tag.outputs.app }} image
        uses: docker/build-push-action@v4
        with:
          context: ${{ steps.tag.outputs.app }}
          file: "${{ steps.tag.outputs.app }}/Dockerfile"
          push: false
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          platforms: linux/amd64
          # cache-from: type=gha
          # cache-to: type=gha,mode=max
      # - name: Run Trivy vulnerability scanner
      #   uses: aquasecurity/trivy-action@master
      #   with:
      #     scan-type: 'image'
      #     image-ref: ${{ fromJSON(steps.meta.outputs.json).tags[0] }}
      #     hide-progress: false
      #     format: 'sarif'
      #     output: 'trivy-results.sarif'
      #     scanners: 'vuln'
      #     ignore-unfixed: true
      #      #severity: 'CRITICAL,HIGH'
      # - name: Upload Trivy scan results to GitHub Security tab
      #   uses: github/codeql-action/upload-sarif@v2
      #   with:
      #     sarif_file: 'trivy-results.sarif'
      # - name: Build and push
      #   uses: docker/build-push-action@v2
      #   with:
      #     context: .
      #     file: ./Dockerfile
      #     push: true
      #     tags: |
      #       ghcr.io/${{ github.repository }}:${{ github.ref }}
      #       ghcr.io/${{ github.repository }}:latest
